[JS 함수] : 자바와 다르게 JS 함수는 하나의 자료의 타입이다.
	1. 선언적 함수
		function 함수명(매개변수명, 매개변수명, ...) { }
		
	2.익명 함수
		- 상수/변수에 저장이 가능하다.
		- function(매개변수명, 매개변수명, ...) { }
		- let 변수명 = function(매개변수명, 매개변수명, ...) { }
		
	3. 람다식 함수 : 최근에 많이 사용되는 방식
		- 상수/변수에 저장이 가능하다.
		- (매개변수명, 매개변수명, ...) => { }
		- const 상수명 = (매개변수명, 매개변수명, ...) => { }
		
[람다식 활용처]
	1. 배열명.forEach(람다식);
		- [].forEach( (반복변수명) => { 실행문; } );
		- 배열내 첫번째 요소부터 마지막 요소까지 반복변수명에 하나씩 요소를 대입하며 반복
		- return 불가능
		- 배열 요소를 단순히 순회 또는 조회할 때 사용
		
	2. let 새로운배열명.map(람다식);
		- [].map( (반복변수명) => { 실행문; } );
		- 배열의 첫번째 요소부터 마지막 요소까지 반복변수명에 하나씩 요소를 대입하며 반복
		- return 가능
		- 사용처 : 배열을 복사하는데 사용
		
	3. fetch().then(람다식).then(람다식).catch(람다식)
	
	
[fetch 함수]
	1. 정의	: JS에서 제공하는 내장 함수
	2. 역할	: HTTP 요청을 보내고 응답을 비동기적으로 처리하는 함수
	3. 사용법	: fetch(URL, option)
		- URL
			- 통신할 서블릿의 URL 주소, @WebServlet()를 확인
			- URL 뒤에 쿼리스트링을 사용이 가능, ?매개변수=값&매개변수=값
		
		- option : 요청을 보낼때 사용되는 HTTP HEADER 정보를 설정
			- method : "GET", "POST", "PUT", "DELETE"
				- HTTP 프로토콜의 method 선택
				
			- headers : {"Content-Type" : "application/json"}
				- HTTP 프로토콜 요청(request)을 보낼때 데이터 자료의 타입을 표시/명시 (3_HTTP.txt 참고)
				- 주로 "application/json"을 사용
				
			- body : JSON.stringify(요청할 자료(객체))
				- HTTP는 문자 자료만 전송이 가능하므로 객체 타입을 문자 타입으로 변환이 필요하다
					- JSON.stringify() : 문자 타입으로 변환하는 함수
			
		- 요청을 보내고 응답을 받을때 설정
			- fetch() 뒤에 .then() 작성
				- .then( (응답객체) => { 응답자료타입변환 } )
					- 응답자료타입변환.json() : fetch함수로 받은 HTTP응답객체에서 JSON(application/json)형식으로 변환하고 변환되면
						다음 then()을 이어서 작업이 가능
					- 응답자료타입변환.text() : fetch함수로 받은 HTTP응답객체에서 문자열(text/plain)형식으로 변환하고 변환되면
						다음 then()을 이어서 작업이 가능
				- .then( (변수명) => { 실행문; } )
		
		- 통신에 예외발생
			- .catch( (에러변수명) => { 예외처리; } );
		
		
		
		
		
		
		
		