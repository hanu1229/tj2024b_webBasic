[HTTP] HyperText Transfer Protocol
	- 문자 이동 프로토콜 : 객체지향이 아니므로 문자 자료만 통신이 가능하다
	
	1. 정의 : 웹에서 사용하는 문자 통신 규약
	
	2. 특징
		1. 무상태 프로토콜 (상태가 없고 저장기능이 없다)
		2. 독립적, 이전요청과 다음 요청은 다르다
		3. TCP/IP 프로토콜에 종속되어 동작 PORT 80/8080을 사용한다
		
	3. 주소체계
		- URL : http://ip:port/자료위치
			Ex) https://nid.naver.com/nidlogin.login : 네이버의 login(html)이 위치한 주소
			
		- URI : http://ip:prot/자료위치?매개변수1=값1&매개변수2=값2
			- 각종 자료들의 유일한 이름이나 위치를 표시하는 규약 (URL + 매개변수)
			Ex) https://finance.naver.com/item/main.naver?code=005930
			
	4. HTTP Header (HTTP 통신 정보)
		1. HTTP *METHOD*		: HTTP를 이용한 통신을 요청할때 분류하는 규칙
		2. HTTP *BODY*			: HTTP를 이용하여 데이터의 내용/본문을 보낼때 사용되는 규칙
		3. HTTP Content-Type	: HTTP를 이용한 데이터의 타입 정보
		4. HTTP HOST			: HTTP를 이용한 통신을 요청하는 서버의 URL 주소
		
	5. HTTP METHOD 종류		CRUD		HTTP기반의 연결(매핑)구축(RESTFUL)	HttpServlet
		1. get				Read		get매핑							doGet()
		2. post				Create		post매핑							doPost()
		3. put				Update		put매핑							doPut()
		4. delete			Delete		delete매핑						doDelete()
		
	6. HTTP 사용처
		1. 브라우저(크롬/엣지/사파리 등등) 상단에 HTTP를 입력한다.
			- http get method만 지원
			
		2. Talend API(restful test)
			- 크롬에서 구글에 talen api를 검색 --> 추가 클릭
			- 크롬 주소 입력창 오른쪽 끝에 퍼즐 모양을 누르면 확장 프로그램을 실행할 수 있다.
			
		3. (JS) Fetch, Ajax(JQuery), Axios(React) 등등 : JS가 제공하는 HTML 통신 라이브러리
		
	7. HTTP가 데이터를 보내는 방법
		1. 쿼리스트링
			- 정의 : URL 주소에서 ?로 구분하여 매개변수명=값을 표시한다. 여러개 일경우 &를 사용
			- 요청 : get, post, put, delete 메소드에서 사용 가능(보안상 좋지 않음)
				Ex) https://finance.naver/com/item/main.naver?code=005930
					(URL) https://finance.naver/com/item/main.naver
					(쿼리스트링) ?code=005930
						매개변수명 : code
						매개변수값 : 005930
		
		2. HTTP header(정보) body
			- 정의 : HTTP 요청과 응답 내용 자체를 전달하는 역할
			- 요청 : post, put 메소드에서 사용을 권장 (쿼리스트링 보다는 보안이 좋다)
				- content-type
			- 응답 : HTTP의 상태 메시지(200 : 성공, 4XX : 프로토콜 문제, 5XX : 서버 문제)
				- content-type
	
	8. HTTP Content-Type
		- 정의 : HTTP의 요청과 응답의 본문 데이터 형식을 나타내는 HTTP header 정보 중 하나.
		- 목적 : 서버와 클라이언트가 데이터를 주고 받는데 있어서 형식을 명시/표시를 한다.
		- 주의 : HTTP는 기본적으로 문자열자료만 전달이 가능하다.
		- 타입 종류
			- text/html							: html문서를 주고 받을때 사용
			- application/json					: json 데이터를 주고 받을때 사용
			- application/xml					: xml 데이터를 주고 받을때 사용
			- application/plain					: 일반 텍스트 데이터를 주고 받을때 사용
			- application/x-www-form-urlencoded	: 폼 형식의 데이터를 주고 받을때 사용, html의 <form> 마크업
			- multipart/form-data				: 첨부파일 업로드할때 사용, 대용량 데이터(byte로 전송)
			
	* 주 웹/앱 개발의 통신 구조 / 서로 다른 언어들간의 주고 받는 방법
		※ 타입 변환 : 서로 다른 언어들간 통신을 할때 타입변환이 필요한 이유는 "서로 다른 타입들을 지원하기 때문"이다.
		- HTML ---- document.querySelect() ----> JS ---- HTTP 통신 ----> JAVA(Servlet) ---- JDBC ----> DB
						문자타입							  문자타입						  문자타입
						
		- HTML과 JSON 자료들 이동
			- HTML --> JS : document.querySelector().value
			- JS --> HTML : document.querySelector().innerHTML
			※ paseInt()등 타입변환이 필요했다.
			
		- JS와 JAVA 자료들 이동
			- JS --> JAVA : HTTP를 이용한 요청(request)
			- JAVA --> JS : HTTP를 이용한 응답(response)
			※ Integer.parseInt()등 타입변환이 필요했다.
			※ 두 언어간에 웹에서 자주 사용되는 통신 데이터 타입 : SCV, XML, JSON
				요즘은 JSON을 사용함으로 application/json
			※ JSON(JavaScript Object Notation) : JSsms JSON 타입을 알지만 JAVA언어는 JSON 타입을 모른다
			
		- Java와 DB 자료들 이동
			- Dao(JDBC)